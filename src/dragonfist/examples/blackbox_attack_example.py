import keras
from skimage import filters
from skimage.color.adapt_rgb import each_channel, hsv_value
import transformations
import transformations as tr
from attacks import back_to_black
from data import DataSet
from ensembles.basic_averaging import BasicAveragingEnsemble
from ensembles.stacking import Stacking
from model import Claw, Palm
from processing import ImageProcessParams, ImageFilter
import numpy as np

epochs = 5

def main():
    #dataset = DataSet.load_from_keras(keras.datasets.cifar10, dtype='float32')
    dataset = DataSet.load_from_keras(keras.datasets.fashion_mnist, dtype='float32')

    #claw = Claw(dataset, auto_train=True, plot_images=0, epochs=9)
    #results = back_to_black(claw, dataset)

    ensemble = build_ensemble(dataset)
    results = back_to_black(ensemble, dataset)

    # palm = Palm(dataset, [ImageFilter(filters.gaussian), ImageFilter(filters.sobel, {}, tr.compat2d)], {'zca_whitening':True},
    #             auto_train=True,
    #             epochs=5)
    # results = back_to_black(palm, dataset)

    print('Accuracy of target black-box on legitimate test examples: ' + str(results.get('bbox_acc_legit')))
    print('Accuracy of substitute model on legitimate test examples: ' + str(results.get('sub_acc_legit')))
    print('Accuracy of substitute model on adversarial images generated by substitute: ' + str(results.get('sub_acc_adv')))
    print('Accuracy of target black-box on adversarial images generated by substitute: ' + str(results.get('bbox_acc_adv')))


def build_ensemble(dataset):

    claw1 = Claw(dataset, auto_train=True, epochs=epochs)
    # claw2 = Claw(dataset, ImageProcessParams(filters.gaussian, {'sigma': 1.5}), auto_train=True, epochs=epochs)
    # claw3 = Claw(dataset, ImageProcessParams(filters.sobel, {}, each_channel, {'zca_whitening': True}), auto_train=True, epochs=epochs)
    #claw2 = Claw(dataset, ImageProcessParams(filters.sobel, {}, each_channel, {'zca_whitening':True}), auto_train=True, epochs=epochs)
    #claw2 = Claw(dataset, ImageProcessParams(filters.sobel, {}, tr.compat2d, {'zca_whitening':True}), auto_train=True, epochs=epochs)
    claw3 = Claw(dataset, ImageProcessParams(transformations.min), auto_train=True, epochs=epochs)
    claw4 = Claw(dataset, ImageProcessParams(transformations.max, preprocess_params={'zca_whitening': True}), auto_train=True, epochs=epochs)
    claw5 = Claw(dataset, ImageProcessParams(transformations.rank), auto_train=True, epochs=epochs)
    claw6 = Claw(dataset, ImageProcessParams(transformations.median, preprocess_params={'zca_whitening': True}), auto_train=True, epochs=epochs)
    claw7 = Claw(dataset, ImageProcessParams(filters.gaussian, {'sigma': 1.0}), auto_train=True, epochs=epochs)
    #claw8 = Claw(dataset, ImageProcessParams(transformations.increase_contrast_saturated), auto_train=True, epochs=epochs)

    ensemble = BasicAveragingEnsemble(claw1, claw6, claw3, claw4, claw5, claw7)

    # x = np.append(dataset.train_images, dataset.test_images, axis=0)
    # y = np.append(dataset.train_labels, dataset.test_labels, axis=0)

    # ensemble.fit(x=x, y=y)
    return ensemble

main()